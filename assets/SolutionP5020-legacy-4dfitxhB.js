System.register(["./index-legacy-s2yKQ2WZ.js"],(function(n,s){"use strict";var a,t,p,e,o,c,l,u;return{setters:[function(n){a=n.a6,t=n.L,p=n.T,e=n.Z,o=n.J,c=n.O,l=n.a3,u=n.ac}],execute:function(){var s={class:"md-blog m-auto text-left"},i=e("p",null,[e("s",null,"某凯的疑惑")],-1),r=e("p",null,"看样例：",-1),k={class:"katex-display"},m={class:"katex"},d={class:"katex-mathml"},f=e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},"10"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},"19"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},"6"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"⇔"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},"10")])],-1),g=e("p",null,"这是因为",-1),y={class:"katex-display"},h={class:"katex"},_={class:"katex-mathml"},w=e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"19"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"10"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mpunct"},","),e("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),e("span",{class:"mord"},"6"),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),e("span",{class:"mrel"},"="),e("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"+"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"3")])],-1),b=u('<p>看起来我们要把 <strong>能够被其他钱凑出来的钱</strong> 给筛掉，</p><p>这样一来剩下的就是我们必须要保留的面值了。</p><p>那我们可以建一个数组 <code>mon[i]</code> ，</p><p>来存 <strong>面值为 i 的钱能不能被其它面值的钱凑出来</strong> ，</p><p>最后再把整个 <code>mon</code> 跑一遍，</p><p>看看原货币系统中剩下几个不能被凑出来的钱，这就是答案了。</p><p>代码如下</p><pre class="language-cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n<span class="token keyword">int</span> mon<span class="token punctuation">[</span><span class="token number">25001</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">/*\nmon[i] = 0 表示i面值的钱不能被凑出来\nmon[i] = 1 表示i面值的钱可以被凑出来\nmon[i] = 2 表示i面值的钱是货币系统中本来就有的钱\n*/</span>\n<span class="token keyword">int</span> coins<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//存钱的面值</span>\n<span class="token keyword">int</span> T<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n\t\t<span class="token function">memset</span><span class="token punctuation">(</span>mon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>mon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">memset</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> coins <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\tmon<span class="token punctuation">[</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n        <span class="token comment">//把货币系统中的钱标好</span>\n\t\t<span class="token function">sort</span><span class="token punctuation">(</span>coins <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> coins <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> coins<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>mon<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\t\t\t<span class="token comment">//如果mon[i]能被凑出来</span>\n\t\t\t<span class="token comment">//那么mon[i+coins[j]]也能被凑出来</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> coins<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//防止数组越界</span>\n\t\t\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t\t\tmon<span class="token punctuation">[</span>i <span class="token operator">+</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t<span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> \n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> coins<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>mon<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>',8);n("default",{__name:"SolutionP5020",setup:function(n,u){return(0,u.expose)({frontmatter:{}}),function(n,u){var v=a("mn"),x=a("mo"),q=a("mrow"),j=a("annotation"),M=a("semantics"),L=a("math"),T=a("eqn");return t(),p("div",s,[i,r,e("section",null,[o(T,null,{default:c((function(){return[e("span",k,[e("span",m,[e("span",d,[o(L,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:c((function(){return[o(M,null,{default:c((function(){return[o(q,null,{default:c((function(){return[o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,{separator:"true"},{default:c((function(){return[l(",")]})),_:1}),o(v,null,{default:c((function(){return[l("10")]})),_:1}),o(x,{separator:"true"},{default:c((function(){return[l(",")]})),_:1}),o(v,null,{default:c((function(){return[l("19")]})),_:1}),o(x,{separator:"true"},{default:c((function(){return[l(",")]})),_:1}),o(v,null,{default:c((function(){return[l("6")]})),_:1}),o(x,null,{default:c((function(){return[l("⇔")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,{separator:"true"},{default:c((function(){return[l(",")]})),_:1}),o(v,null,{default:c((function(){return[l("10")]})),_:1})]})),_:1}),o(j,{encoding:"application/x-tex"},{default:c((function(){return[l("3, 10, 19, 6 \\Leftrightarrow 3, 10")]})),_:1})]})),_:1})]})),_:1})]),f])])]})),_:1})]),g,e("section",null,[o(T,null,{default:c((function(){return[e("span",y,[e("span",h,[e("span",_,[o(L,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:c((function(){return[o(M,null,{default:c((function(){return[o(q,null,{default:c((function(){return[o(v,null,{default:c((function(){return[l("19")]})),_:1}),o(x,null,{default:c((function(){return[l("=")]})),_:1}),o(v,null,{default:c((function(){return[l("10")]})),_:1}),o(x,null,{default:c((function(){return[l("+")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,null,{default:c((function(){return[l("+")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,null,{default:c((function(){return[l("+")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,{separator:"true"},{default:c((function(){return[l(",")]})),_:1}),o(v,null,{default:c((function(){return[l("6")]})),_:1}),o(x,null,{default:c((function(){return[l("=")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1}),o(x,null,{default:c((function(){return[l("+")]})),_:1}),o(v,null,{default:c((function(){return[l("3")]})),_:1})]})),_:1}),o(j,{encoding:"application/x-tex"},{default:c((function(){return[l("19 = 10 + 3 + 3 + 3, 6 = 3 + 3")]})),_:1})]})),_:1})]})),_:1})]),w])])]})),_:1})]),b])}}})}}}));
