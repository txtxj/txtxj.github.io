import{L as s,T as a,ac as p}from"./index-G6jgGEsg.js";const t={class:"md-blog m-auto text-left"},o=p('<p>本篇笔记记录了后座力的实现。</p><hr><h2 id="%E5%90%8E%E5%BA%A7%E5%8A%9B%EF%BC%88addforce%EF%BC%89%E4%B8%8E%E7%A7%BB%E5%8A%A8%EF%BC%88velocity%EF%BC%89%E4%B8%8D%E5%85%BC%E5%AE%B9" tabindex="-1"><a class="header-anchor" href="#%E5%90%8E%E5%BA%A7%E5%8A%9B%EF%BC%88addforce%EF%BC%89%E4%B8%8E%E7%A7%BB%E5%8A%A8%EF%BC%88velocity%EF%BC%89%E4%B8%8D%E5%85%BC%E5%AE%B9" data-clickable=""><span>后座力（AddForce）与移动（velocity）不兼容</span></a></h2><p>用 <code>AddForce</code> 给玩家添加一个反向的作用力后，</p><p>如果玩家正在进行移动，</p><p>由于移动是直接对刚体的 <code>velocity</code> 进行操作，</p><p>所以玩家受到的反作用力会在一瞬间消失。</p><p>实现的效果就是看到玩家向后闪了一小段距离。</p><hr><h2 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" tabindex="-1"><a class="header-anchor" href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" data-clickable=""><span>解决方案</span></a></h2><p>考虑角色的移动也用 <code>AddForce</code> 实现，</p><p>当方向键按下的时候判断该方向的速度是否达到最大速度，</p><p>如果没有达到最大速度就给玩家加一个对应的力。</p><pre class="language-cs"><code class="language-cs"><span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">float</span></span> speed <span class="token operator">=</span> <span class="token number">2f</span><span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">float</span></span> rh <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">&quot;Horizontal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">float</span></span> rv <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxisRaw</span><span class="token punctuation">(</span><span class="token string">&quot;Vertical&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">&gt;</span> <span class="token number">0f</span> <span class="token operator">&amp;&amp;</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> speed<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span>speed<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rh <span class="token operator">&lt;</span> <span class="token number">0f</span> <span class="token operator">&amp;&amp;</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token operator">-</span>speed<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token operator">-</span>speed<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">&gt;</span> <span class="token number">0f</span> <span class="token operator">&amp;&amp;</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> speed<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> speed<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">&lt;</span> <span class="token number">0f</span> <span class="token operator">&amp;&amp;</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token operator">-</span>speed<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddForce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token operator">-</span>speed<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">//模拟摩擦力</span>\n    <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Rigidbody2D<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>velocity <span class="token operator">*=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><p>子弹发射时的后座力和以前一样用 <code>AddForce</code> 实现，不再赘述。</p>',15),e=[o],r={__name:"UnitySelf02",setup(c,{expose:n}){return n({frontmatter:{}}),(u,k)=>(s(),a("div",t,e))}};export{r as default};
