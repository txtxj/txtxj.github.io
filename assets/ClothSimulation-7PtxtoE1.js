import{_ as g}from"./Image-fYAaRmuI.js";import{aa as c,J as b,K as _,S as n,W as s,M as a,a3 as t,ag as u}from"./index-n_xEpEk7.js";import"./utils-7DFvP5aU.js";const y={class:"md-blog m-auto text-left"},w=u('<p>仓库地址：<a href="https://github.com/txtxj/Cloth-Simulation" data-clickable="">https://github.com/txtxj/Cloth-Simulation</a></p><p>本来上次的 SSAO 做完之后准备去做流体模拟的，结果因为完全不懂 GPU 编程，看不懂 compute shader ，并且以前没做过物理模拟而放弃了。</p><p>为了学习 GPU 编程和 PBD ，笔者选择了布料模拟这一个比较简单的题目来做（然而布料模拟并不是 PBD ），等搞明白之后再去尝试流体模拟。</p><p>然而在做这个项目的过程中，只能找到 CPU 布料模拟和 GPU 粒子效果，没找到 GPU 布料模拟，这对一个初学 GPU 编程的小白真的是巨大痛苦……</p><p>本文记录了笔者实现过程中遇到的各种问题。</p><hr><h2 id="%E7%89%A9%E7%90%86%E5%9F%BA%E7%A1%80" tabindex="-1"><a class="header-anchor" href="#%E7%89%A9%E7%90%86%E5%9F%BA%E7%A1%80" data-clickable=""><span>物理基础</span></a></h2><p>根据 Games101 课上的介绍，布料可以使用网格弹簧质点系统进行模拟。</p><p>使用一个由质点构成的矩阵，质点之间根据以下规则连接弹簧：</p><ol start="0"><li>连接横向、纵向相邻的质点，这种弹簧称为结构弹簧；</li><li>连接对角线上的质点，这种弹簧称为剪切弹簧，这种弹簧能抵抗使布料剪切变形的力；</li><li>连接横向、纵向相隔一个位置的质点，这种弹簧称为弯曲弹簧，这种弹簧能抵抗使布料折叠的力。</li></ol>',10),x=n("p",null,"质点之间的弹簧力满足胡克定律",-1),v={class:"katex-display"},E={class:"katex"},B={class:"katex-mathml"},A=n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8444em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathbf",style:{"margin-right":"0.10903em"}},"f"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3361em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathbf mtight"},"b"),n("span",{class:"mrel mtight"},"→"),n("span",{class:"mord mathbf mtight"},"a")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"2.3074em","vertical-align":"-0.936em"}}),n("span",{class:"mord"},"−"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0315em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"s")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"1.3714em"}},[n("span",{style:{top:"-2.314em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"∣∣"),n("span",{class:"mord"},[n("span",{class:"mord mathbf"},"b"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathbf"},"a")]),n("span",{class:"mord"},"∣∣")])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.677em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathbf"},"b"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathbf"},"a")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.936em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})]),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"∣∣"),n("span",{class:"mord"},[n("span",{class:"mord mathbf"},"b"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mord mathbf"},"a")]),n("span",{class:"mord"},"∣∣"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mclose"},")")])],-1),z=u('<p>理同 Games101 作业 8 ，先根据所有弹簧计算出所有质点的受力情况，再使用显式欧拉积分更新所有质点的速度、位置信息</p><pre class="language-cpp"><code class="language-cpp">a <span class="token operator">=</span> F <span class="token operator">/</span> m\n<span class="token function">v</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">v</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> a <span class="token operator">*</span> dt\n<span class="token function">x</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">x</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">v</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dt\n</code></pre><h2 id="%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89" tabindex="-1"><a class="header-anchor" href="#%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%EF%BC%88%E8%B8%A9%E5%9D%91%EF%BC%89" data-clickable=""><span>代码模拟（踩坑）</span></a></h2><p>理论非常简单，但在实现过程中笔者踩了不少坑。</p><p>初次实现，笔者使用与 Games101 相同的代码框架，定义了质点类与弹簧类如下</p><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">Particle</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Vector3</span> position<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Vector3</span> velocity<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name">Vector3</span> force<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> isFixed<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">struct</span> <span class="token class-name">Spring</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">Vector2Int</span> node<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> length<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token function">Spring</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        length <span class="token operator">=</span> <span class="token punctuation">(</span>particles<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>position <span class="token operator">-</span> particles<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>magnitude<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>并在 compute shader 中使用两个 kernel 分别计算每个弹簧贡献的力、每个粒子的速度与位置</p><pre class="language-cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token function">numthreads</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">void</span> <span class="token function">UpdateParticles</span><span class="token punctuation">(</span>uint3 id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    float3 acc <span class="token operator">=</span> particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">*</span> wass <span class="token operator">+</span> gravity<span class="token punctuation">;</span>\n    particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>velocity <span class="token operator">+=</span> acc <span class="token operator">*</span> dt<span class="token punctuation">;</span>\n    particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>position <span class="token operator">+=</span> particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>velocity <span class="token operator">*</span> dt<span class="token punctuation">;</span>\n    particles<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">=</span> <span class="token function">float3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">[</span><span class="token function">numthreads</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">void</span> <span class="token function">UpdateSprings</span><span class="token punctuation">(</span>uint3 id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> springs<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b <span class="token operator">=</span> springs<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>y<span class="token punctuation">;</span>\n    float3 dir <span class="token operator">=</span> particles<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>position <span class="token operator">-</span> particles<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>\n    <span class="token keyword">float</span> length <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    float3 force <span class="token operator">=</span> ks <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> springs<span class="token punctuation">[</span>id<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> dir<span class="token punctuation">;</span>\n    particles<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">-=</span> force<span class="token punctuation">;</span>\n    particles<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">+=</span> force<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><p>然而当程序运行起来的时候，却得到了这样的效果</p>',9),S=n("p",null,"粒子满天飞。",-1),F=n("p",null,[t("根据之前做弹簧模拟的经验，这是模拟步长 "),n("code",null,"dt"),t(" 过大和弹簧弹性系数 "),n("code",null,"ks"),t(" 过大导致的不稳定，进而失真。")],-1),G=n("p",null,"接下来就是漫长的调参过程，在调参过程中发现，质点数量太多严重影响了系统的稳定性，因此笔者使用了最简单的 2x2 系统进行模拟测试。",-1),D=n("p",null,"如下图是一个比较合适的参数效果",-1),V=n("p",null,"可以看到，除了上方两个固定的粒子，下方粒子产生了明显偏移，且偏移方向为左侧（序号较小）的粒子。",-1),I=n("p",null,"刚开始笔者认为这是因为重力太大，多个弹簧之间计算产生了不同的误差，误差逐渐积累导致粒子向左偏移，又进行了大量调参，但仍然得不到好的效果。",-1),U=n("p",null,"如上，将阻力调大、重力调小、弹性系数调大之后，整个系统很稳定，但粒子仍然会向左偏移。",-1),C=n("p",null,"可以猜测是弹簧的某些 bug 导致了粒子左偏。",-1),P=n("p",null,"为了找到问题是否出在弹簧身上，笔者首先制作了 1xn 的普通弹簧，发现弹簧并没有任何问题，其表现与 Games101 中作业同样优秀。",-1),j=n("p",null,"但将粒子列数调多，制成布料，又出现了粒子满天飞的情况。",-1),N=n("p",null,"若将剪切弹簧和弯曲弹簧删去，只保留结构弹簧，粒子变得稳定，得到了如下结果",-1),T=u('<p>所有粒子均向左偏，并最终稳定地保持在一条线上，而右上角的固定粒子似乎与其他所有粒子都毫无关系。</p><p>自然可以推测，右方粒子没有给其下方粒子提供任何力，其弹簧实际上是无效的。</p><p>这时笔者才想到，很可能 GPU 的并行计算并不能给自身线程所使用的数据上锁，否则会降低并行性。</p><p>也就是说，在 <code>UpdateSprings</code> 函数中，只有编号较小的弹簧能够顺利执行 <code>particles[a].force -= force;</code> 和 <code>particles[b].force += force;</code> 操作并将其结果写入内存。</p><p>修改 <code>UpdateSprings</code> 函数，令其只能更新未被更新过的粒子的受力情况，发现模拟结果与之前一致，证明了上述猜测正确。</p><h2 id="%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%EF%BC%88%E6%AD%A3%E8%A7%A3%EF%BC%89" tabindex="-1"><a class="header-anchor" href="#%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%EF%BC%88%E6%AD%A3%E8%A7%A3%EF%BC%89" data-clickable=""><span>代码模拟（正解）</span></a></h2><p>考虑另外一种计算受力的方法，删除弹簧类，将 <code>UpdateSprings</code> 函数改为对每个粒子求解一次约束，求解过程中不修改其他粒子的物理信息。所有粒子的受力情况求解完成之后，使用另一个 kernel 求其加速度、速度、位置。</p><p>由于布料固定为一个矩阵，任意与粒子 p 相连的其他粒子和粒子 p 之间的偏移量可以使用一个长度为 12 的数组表示</p><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">static</span> int2 springs<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span>\n<span class="token punctuation">{</span>\n    <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Structure</span>\n    <span class="token function">int2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Shearing</span>\n    <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// Bending </span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><p>对于每个粒子，通过其 <code>id</code> 计算出二维坐标，再加上上述偏移量，即可得到与其相连的粒子。</p><pre class="language-cpp"><code class="language-cpp"><span class="token comment">// reststore three original spring lengths</span>\nfloat3 rest<span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token function">numthreads</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">void</span> <span class="token function">UpdateSprings</span><span class="token punctuation">(</span>uint3 id <span class="token operator">:</span> SV_DispatchThreadID<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span> index <span class="token operator">=</span> id<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// Out of range</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>isFixed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    id<span class="token punctuation">.</span>xy <span class="token operator">=</span> <span class="token function">GetId</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> int2 pos <span class="token operator">=</span> id<span class="token punctuation">.</span>xy <span class="token operator">+</span> springs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> <span class="token keyword">int</span> posIndex <span class="token operator">=</span> <span class="token function">GetIndex</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> float3 dir <span class="token operator">=</span> particles<span class="token punctuation">[</span>posIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>position <span class="token operator">-</span> particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">;</span>\n            <span class="token keyword">const</span> float3 ndir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// spring</span>\n            particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">+=</span> ks <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">-</span> rest<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> ndir<span class="token punctuation">;</span>\n            <span class="token comment">// damping</span>\n            particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">-=</span> kd <span class="token operator">*</span> <span class="token function">dot</span><span class="token punctuation">(</span>ndir<span class="token punctuation">,</span> particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>velocity<span class="token punctuation">)</span> <span class="token operator">*</span> ndir<span class="token punctuation">;</span>\n            <span class="token comment">// gravity</span>\n            particles<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>force <span class="token operator">+=</span> gravity <span class="token operator">*</span> mass<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><p>最终效果非常好</p>',12),q=u('<p>然而实际上笔者在实现过程中还遇到了一个离奇的 bug 。</p><p>使用如下代码进行 <code>index</code> 和 <code>id</code> 的互相转化，会出现只有第一列粒子运动的情况（即只有第一列粒子被更新）。</p><pre class="language-cpp"><code class="language-cpp">int2 <span class="token function">GetId</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">int2</span><span class="token punctuation">(</span>index <span class="token operator">/</span> size<span class="token punctuation">.</span>y<span class="token punctuation">,</span> index <span class="token operator">%</span> size<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">GetIndex</span><span class="token punctuation">(</span>int2 id<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> id<span class="token punctuation">.</span>x <span class="token operator">*</span> size<span class="token punctuation">.</span>y <span class="token operator">+</span> id<span class="token punctuation">.</span>y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><p>经过巨大痛苦的 debug 之后发现原因是 compute shader 中布料大小参数 <code>size</code> 的类型是 <code>int3</code> ，</p><p>而在 c# 文件中则使用了</p><pre class="language-csharp"><code class="language-csharp">compute<span class="token punctuation">.</span><span class="token function">SetVector</span><span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span>clothSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">,</span> clothSize<span class="token punctuation">.</span>x <span class="token operator">*</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><p>进行赋值。</p><p>c# 代码使用三个 int 类型变量生成一个 <code>Vector3</code> 类型（也即 <code>float3</code>）变量，并将其按照 IEEE754 标准写入了 compute shader 里 <code>size</code> 的地址中，</p><p>导致 <code>size</code> 数据极大，在更新第二列及后续数据时被判定越界。</p><p>正确写法是</p><pre class="language-csharp"><code class="language-csharp">compute<span class="token punctuation">.</span><span class="token function">SetInts</span><span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">{</span>clothSize<span class="token punctuation">.</span>x<span class="token punctuation">,</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">,</span> clothSize<span class="token punctuation">.</span>x <span class="token operator">*</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><h2 id="%E6%B8%B2%E6%9F%93" tabindex="-1"><a class="header-anchor" href="#%E6%B8%B2%E6%9F%93" data-clickable=""><span>渲染</span></a></h2><p>使用 <code>Graphics.DrawProceduralNow</code> 绘制点，或提供 <code>indexBuffer</code> 绘制三角形。</p><pre class="language-csharp"><code class="language-csharp">Graphics<span class="token punctuation">.</span><span class="token function">DrawProceduralNow</span><span class="token punctuation">(</span>MeshTopology<span class="token punctuation">.</span>Points<span class="token punctuation">,</span> particleCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Draw points</span>\nGraphics<span class="token punctuation">.</span><span class="token function">DrawProceduralNow</span><span class="token punctuation">(</span>MeshTopology<span class="token punctuation">.</span>Triangles<span class="token punctuation">,</span> indexBuffer<span class="token punctuation">,</span> indexBuffer<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Draw triangles</span>\n</code></pre><p><code>indexBuffer</code> 提供了每个三角形三个顶点在顶点数组中的索引。</p><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">InitiateIndexBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> indices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clothSize<span class="token punctuation">.</span>x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">int</span></span> id <span class="token operator">=</span> i <span class="token operator">*</span> clothSize<span class="token punctuation">.</span>y <span class="token operator">+</span> j<span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id <span class="token operator">-</span> clothSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id <span class="token operator">-</span> clothSize<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            indices<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id <span class="token operator">-</span> clothSize<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    indexBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GraphicsBuffer</span><span class="token punctuation">(</span>GraphicsBuffer<span class="token punctuation">.</span>Target<span class="token punctuation">.</span>Index<span class="token punctuation">,</span> indices<span class="token punctuation">.</span>Count<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    indexBuffer<span class="token punctuation">.</span><span class="token function">SetData</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><p>对于除了第 0 行、第 0 列的顶点，将其左上方的两个三角形的六个顶点按逆时针（或顺时针）顺序输入数组中。</p>',17),M=n("p",null,"再使用微表面 Blinn-Phone 模型着色，得到如下结果",-1),Q={__name:"ClothSimulation",setup(H,{expose:k}){return k({frontmatter:{}}),(Y,J)=>{const e=g,p=c("mi"),o=c("mo"),l=c("mrow"),i=c("msub"),r=c("mfrac"),d=c("annotation"),m=c("semantics"),h=c("math"),f=c("eqn");return b(),_("div",y,[w,n("p",null,[s(e,{src:"https://s2.loli.net/2022/07/30/jY1Io8i6VHzBluX.jpg",alt:"20220730_1.jpg","show-toolbar-tooltip":""})]),x,n("section",null,[s(f,null,{default:a(()=>[n("span",v,[n("span",E,[n("span",B,[s(h,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},{default:a(()=>[s(m,null,{default:a(()=>[s(l,null,{default:a(()=>[s(i,null,{default:a(()=>[s(p,{mathvariant:"bold"},{default:a(()=>[t("f")]),_:1}),s(l,null,{default:a(()=>[s(p,{mathvariant:"bold"},{default:a(()=>[t("b")]),_:1}),s(o,null,{default:a(()=>[t("→")]),_:1}),s(p,{mathvariant:"bold"},{default:a(()=>[t("a")]),_:1})]),_:1})]),_:1}),s(o,null,{default:a(()=>[t("=")]),_:1}),s(o,null,{default:a(()=>[t("−")]),_:1}),s(i,null,{default:a(()=>[s(p,null,{default:a(()=>[t("k")]),_:1}),s(p,null,{default:a(()=>[t("s")]),_:1})]),_:1}),s(r,null,{default:a(()=>[s(l,null,{default:a(()=>[s(p,{mathvariant:"bold"},{default:a(()=>[t("b")]),_:1}),s(o,null,{default:a(()=>[t("−")]),_:1}),s(p,{mathvariant:"bold"},{default:a(()=>[t("a")]),_:1})]),_:1}),s(l,null,{default:a(()=>[s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(l,null,{default:a(()=>[s(p,{mathvariant:"bold"},{default:a(()=>[t("b")]),_:1}),s(o,null,{default:a(()=>[t("−")]),_:1}),s(p,{mathvariant:"bold"},{default:a(()=>[t("a")]),_:1})]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1})]),_:1})]),_:1}),s(o,{stretchy:"false"},{default:a(()=>[t("(")]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(l,null,{default:a(()=>[s(p,{mathvariant:"bold"},{default:a(()=>[t("b")]),_:1}),s(o,null,{default:a(()=>[t("−")]),_:1}),s(p,{mathvariant:"bold"},{default:a(()=>[t("a")]),_:1})]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(p,{mathvariant:"normal"},{default:a(()=>[t("∣")]),_:1}),s(o,null,{default:a(()=>[t("−")]),_:1}),s(p,null,{default:a(()=>[t("l")]),_:1}),s(o,{stretchy:"false"},{default:a(()=>[t(")")]),_:1})]),_:1}),s(d,{encoding:"application/x-tex"},{default:a(()=>[t(" \\mathbf{f_{b \\rightarrow a}} = -k_s \\frac{\\mathbf{b - a}}{||\\mathbf{b - a}||}(||\\mathbf{b - a}|| - l) ")]),_:1})]),_:1})]),_:1})]),A])])]),_:1})]),z,n("p",null,[s(e,{src:"https://s2.loli.net/2022/07/30/xuUHNEFcr25SjYz.gif",alt:"20220730_2.gif","show-toolbar-tooltip":""})]),S,F,G,D,n("p",null,[s(e,{src:"https://s2.loli.net/2022/07/30/wVFuonz8WeDZ3U9.gif",alt:"20220730_3.gif","show-toolbar-tooltip":""})]),V,I,n("p",null,[s(e,{src:"https://s2.loli.net/2022/07/30/Gsl8yQ9KznRji2H.gif",alt:"20220730_4.gif","show-toolbar-tooltip":""})]),U,C,P,j,N,n("p",null,[s(e,{src:"https://s2.loli.net/2022/07/30/6bi5eQWMgT9UldV.gif",alt:"20220730_5.gif","show-toolbar-tooltip":""})]),T,n("p",null,[s(e,{src:"https://s2.loli.net/2023/01/10/HrwCEl9BPJN1cAh.gif",alt:"20220730_6.gif","show-toolbar-tooltip":""})]),q,n("p",null,[s(e,{src:"https://s2.loli.net/2022/08/03/j5KcmWnYbEU7GeO.jpg",alt:"20220730_7.jpg","show-toolbar-tooltip":""})]),M,n("p",null,[s(e,{src:"https://s2.loli.net/2023/01/10/6tU3mJdRbHXsoYy.gif",alt:"20220730_8.gif","show-toolbar-tooltip":""})])])}}};export{Q as default};
